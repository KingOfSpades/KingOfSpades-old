<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kingofspades.github.io/</id><title>Christian's Blog</title><subtitle>Consuming API's and deploying infra since Stardate ~44895. Talk .md to me</subtitle> <updated>2022-11-27T17:45:10+01:00</updated> <author> <name>Christian A. Benstein</name> <uri>https://kingofspades.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://kingofspades.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://kingofspades.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 Christian A. Benstein </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>hey for load testing http applications</title><link href="https://kingofspades.github.io/posts/hey-for-loadtesting-http/" rel="alternate" type="text/html" title="hey for load testing http applications" /><published>2022-10-25T00:00:00+02:00</published> <updated>2022-11-27T17:38:52+01:00</updated> <id>https://kingofspades.github.io/posts/hey-for-loadtesting-http/</id> <content src="https://kingofspades.github.io/posts/hey-for-loadtesting-http/" /> <author> <name>Christian A. Benstein</name> </author> <category term="Commandline" /> <summary> short hey is a HTTP load tester CLI tool to benchmark HTTP requests to a HTTP end-point. Get it at GitHub Today we will be taking a look at a small utility called hey. You can use hey to load test HTTP applications or generate load for a web application. This comes in handy when you want to simulate use or check what your app does when it receives 1000s of requests. Warning: Using a load ... </summary> </entry> <entry><title>Build-log: Montsinger Rebound-S</title><link href="https://kingofspades.github.io/posts/building-the-montsinger-rebound-s/" rel="alternate" type="text/html" title="Build-log: Montsinger Rebound-S" /><published>2022-08-27T00:00:00+02:00</published> <updated>2022-10-10T15:23:50+02:00</updated> <id>https://kingofspades.github.io/posts/building-the-montsinger-rebound-s/</id> <content src="https://kingofspades.github.io/posts/building-the-montsinger-rebound-s/" /> <author> <name>Christian A. Benstein</name> </author> <category term="Keyboard" /> <summary> The Rebound-S by Montsinger is a 60% case compatible ~40% keyboard ortholinear keyboard with an ergonomically-friendly 7° typing angle. It differs from the Rebound because it has a staggered contour. The Rebound’s have some great customisation options like spot for a dedicated for an EC12 encoder and some extra keys located between the two halves of the keyboard. The PCB also allows you to bui... </summary> </entry> <entry><title>Configuring default Project creation in Openshift</title><link href="https://kingofspades.github.io/posts/customizing-project-creation-openshift/" rel="alternate" type="text/html" title="Configuring default Project creation in Openshift" /><published>2022-02-27T00:00:00+01:00</published> <updated>2022-02-28T12:07:14+01:00</updated> <id>https://kingofspades.github.io/posts/customizing-project-creation-openshift/</id> <content src="https://kingofspades.github.io/posts/customizing-project-creation-openshift/" /> <author> <name>Christian A. Benstein</name> </author> <category term="EX280" /> <summary> In this blog we will have a look at “Configuring project creation” in an Openshift cluster. We will: Create a Project Template Add resources like a limit-range to the template Disable project self-provisioning As always. We will be doing all the examples in a CRC (Code Ready Containers) environment. Project template When creating a new project in Openshift (a namespace) the API query... </summary> </entry> <entry><title>Controlling Ingress with Openshift Network Policy's</title><link href="https://kingofspades.github.io/posts/controlling-network-access-in-openshift/" rel="alternate" type="text/html" title="Controlling Ingress with Openshift Network Policy's" /><published>2022-02-27T00:00:00+01:00</published> <updated>2022-02-27T00:00:00+01:00</updated> <id>https://kingofspades.github.io/posts/controlling-network-access-in-openshift/</id> <content src="https://kingofspades.github.io/posts/controlling-network-access-in-openshift/" /> <author> <name>Christian A. Benstein</name> </author> <category term="EX280" /> <summary> This blog will go in to the “software defined networking” of “Configure networking components” objective of the EX280 exam from RedHat. In this post we will: Traffic to pods The types of Network Policy’s we can create Create a Network Policy based on a application label This post focuses on Ingress (incoming traffic). You can also create Egress policy’s to manage outgoing traffic ... </summary> </entry> <entry><title>Exposing services with routes and SSL</title><link href="https://kingofspades.github.io/posts/exposing-services-with-routes-and-ssl/" rel="alternate" type="text/html" title="Exposing services with routes and SSL" /><published>2022-02-26T00:00:00+01:00</published> <updated>2022-02-26T16:44:14+01:00</updated> <id>https://kingofspades.github.io/posts/exposing-services-with-routes-and-ssl/</id> <content src="https://kingofspades.github.io/posts/exposing-services-with-routes-and-ssl/" /> <author> <name>Christian A. Benstein</name> </author> <category term="EX280" /> <summary> This blog will go in to “Configure networking components” objective of the EX280 exam from RedHat. In this post we will: Have a look at services Expose a service with a URL Check out the types of routes we can create Creating a route to a service that is encrypted with SSL As always. We will be doing all the examples in a CRC (Code Ready Containers) environment. Understanding servi... </summary> </entry> </feed>
